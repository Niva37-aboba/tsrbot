import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

BOT_TOKEN = '7974009937:AAFgGbCjjUzTLyhHnYVtdj-bp9_Qtw_zqH4'
HR_CHAT_ID = -4839159337

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('tsr_anketa.db')
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS lone_workers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    fio TEXT,
    citizenship TEXT,
    work_permit TEXT,
    permit_validity TEXT,
    permit_regions TEXT,
    home_region TEXT,
    work_regions TEXT,
    pvc_exp TEXT,
    pvc_systems TEXT,
    al_exp TEXT,
    al_systems TEXT,
    ip_patent TEXT,
    limitations TEXT,
    limitations_details TEXT,
    conviction TEXT,
    conviction_details TEXT,
    work_10_6 TEXT,
    work_10_7 TEXT,
    objects TEXT,
    phone TEXT
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS teams (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    contact_name TEXT,
    citizenship TEXT,
    work_permit TEXT,
    permit_validity TEXT,
    permit_regions TEXT,
    home_region TEXT,
    work_regions TEXT,
    members_count TEXT,
    max_expand TEXT,
    pvc_exp TEXT,
    pvc_systems TEXT,
    al_exp TEXT,
    al_systems TEXT,
    ip_patent TEXT,
    limitations TEXT,
    limitations_details TEXT,
    conviction TEXT,
    conviction_details TEXT,
    work_10_6 TEXT,
    work_10_7 TEXT,
    objects TEXT,
    phone TEXT
);
""")
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
citizenship_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–§")],
        [KeyboardButton(text="–°–ù–ì")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
    ], resize_keyboard=True, one_time_keyboard=True
)
yesno_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞")],
        [KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True, one_time_keyboard=True
)
experience_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–µ—Ç –æ–ø—ã—Ç–∞")],
        [KeyboardButton(text="<1 –≥–æ–¥–∞")],
        [KeyboardButton(text="1‚Äì3 –≥–æ–¥–∞")],
        [KeyboardButton(text="3‚Äì5 –ª–µ—Ç")],
        [KeyboardButton(text=">5 –ª–µ—Ç")],
        [KeyboardButton(text="–ì–æ—Ç–æ–≤ –æ—Å–≤–∞–∏–≤–∞—Ç—å")]
    ], resize_keyboard=True, one_time_keyboard=True
)
ip_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ï—Å—Ç—å")],
        [KeyboardButton(text="–ù–µ—Ç")],
        [KeyboardButton(text="–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å")]
    ], resize_keyboard=True, one_time_keyboard=True
)
limitations_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–µ—Ç")],
        [KeyboardButton(text="–ï—Å—Ç—å, –∞–ª–∏–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="–ï—Å—Ç—å, –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="–ï—Å—Ç—å, –ø–æ–ª—É—á–∞—é –ø–æ—Å–æ–±–∏—è")],
        [KeyboardButton(text="–ï—Å—Ç—å, –¥—Ä—É–≥–æ–µ")]
    ], resize_keyboard=True, one_time_keyboard=True
)
work_mode_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞")],
        [KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True, one_time_keyboard=True
)
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –Ø –º–æ–Ω—Ç–∞–∂–Ω–∏–∫ (–æ–¥–∏–Ω–æ—á–∫–∞)"), KeyboardButton(text="üë• –Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –º–æ–Ω—Ç–∞–∂–Ω—É—é –±—Ä–∏–≥–∞–¥—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"), KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

user_state = {}

# ‚Äî‚Äî‚Äî –§–£–ù–ö–¶–ò–ò –¢–û–õ–¨–ö–û –î–õ–Ø –õ–ò–ß–ö–ò (private) ‚Äî‚Äî‚Äî

@dp.message(Command('start'))
async def start(message: types.Message):
    if message.chat.type != "private":
        return
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –û–û–û \"–¢–°–† –û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ\"!\n"
        "–ú—ã ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "‚¨áÔ∏è –î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=main_kb
    )
    user_state[message.from_user.id] = None

@dp.message(lambda m: m.chat.type == "private" and m.text == "üë§ –Ø –º–æ–Ω—Ç–∞–∂–Ω–∏–∫ (–æ–¥–∏–Ω–æ—á–∫–∞)")
async def lone_worker_start(message: types.Message):
    user_state[message.from_user.id] = {'role': 'lone', 'step': 1}
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:")

@dp.message(lambda m: m.chat.type == "private" and m.text == "üë• –Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –º–æ–Ω—Ç–∞–∂–Ω—É—é –±—Ä–∏–≥–∞–¥—É")
async def team_start(message: types.Message):
    user_state[message.from_user.id] = {'role': 'team', 'step': 1}
    await message.answer("–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:")

@dp.message(lambda m: m.chat.type == "private" and m.text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def about_company(message: types.Message):
    await message.answer(
        "<b>–û–û–û ‚Äú–¢–°–† –û—Å—Ç–µ–∫–ª–µ–Ω–∏–µ‚Äù</b> ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "üè¢ <b>–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º:</b>\n"
        "‚Ä¢ –û–∫–æ–Ω–Ω—ã–µ –∏ –≤—Ö–æ–¥–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ –ë–∞–ª–∫–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –ü–í–• –∏ –∞–ª—é–º–∏–Ω–∏—è\n\n"
        "üõ† <b>–ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –¢–ö –†–§ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n"
        "‚Ä¢ –í—ã–ø–ª–∞—Ç—ã <b>2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü</b>\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ–¥–æ—Å–º–æ—Ç—Ä\n"
        "‚Ä¢ –°–ø–µ—Ü–æ–¥–µ–∂–¥–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "‚Ä¢ –ó–∞–Ω—è—Ç–æ—Å—Ç—å –∫—Ä—É–≥–ª—ã–π –≥–æ–¥\n\n"
        "üë∑‚Äç‚ôÇÔ∏è <b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ú–æ–Ω—Ç–∞–∂ –ü–í–• –∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞",
        parse_mode="HTML"
    )

@dp.message(lambda m: m.chat.type == "private" and m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    user_state[message.from_user.id] = {'role': 'question'}
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dp.message(lambda m: m.chat.type == "private" and user_state.get(m.from_user.id, {}).get('role') == 'question')
async def handle_user_question(message: types.Message):
    hr_text = (
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username if message.from_user.username else message.from_user.id}:\n"
        f"{message.text}"
    )
    await bot.send_message(HR_CHAT_ID, hr_text, reply_markup=None)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω HR-–æ—Ç–¥–µ–ª—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_kb)
    user_state[message.from_user.id] = None

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–∫–∏
@dp.message(lambda m: m.chat.type == "private" and user_state.get(m.from_user.id, {}).get('role') == 'lone')
async def lone_worker_form(message: types.Message):
    state = user_state[message.from_user.id]
    step = state.get('step', 1)

    if step == 1:
        state['fio'] = message.text
        await message.answer("–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=citizenship_kb)
        state['step'] = 2
    elif step == 2:
        state['citizenship'] = message.text
        if message.text != "–†–§":
            await message.answer("–ï—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É?", reply_markup=yesno_kb)
            state['step'] = 21
        else:
            await message.answer("–†–µ–≥–∏–æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
            state['step'] = 3
    elif step == 21:
        state['work_permit'] = message.text
        await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞)?")
        state['step'] = 22
    elif step == 22:
        state['permit_validity'] = message.text
        await message.answer("–í –∫–∞–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ?")
        state['step'] = 23
    elif step == 23:
        state['permit_regions'] = message.text
        await message.answer("–†–µ–≥–∏–æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
        state['step'] = 3
    elif step == 3:
        state['home_region'] = message.text
        await message.answer("–í –∫–∞–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å?")
        state['step'] = 4
    elif step == 4:
        state['work_regions'] = message.text
        await message.answer("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ü–í–• –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:", reply_markup=experience_kb)
        state['step'] = 5
    elif step == 5:
        state['pvc_exp'] = message.text
        await message.answer("–° –∫–∞–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ü–í–• –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏?")
        state['step'] = 6
    elif step == 6:
        state['pvc_systems'] = message.text
        await message.answer("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:", reply_markup=experience_kb)
        state['step'] = 7
    elif step == 7:
        state['al_exp'] = message.text
        await message.answer("–° –∫–∞–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–ª—é–º–∏–Ω–∏—è –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏?")
        state['step'] = 8
    elif step == 8:
        state['al_systems'] = message.text
        await message.answer("–ï—Å—Ç—å –∏–ª–∏ –≥–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å –ò–ü –Ω–∞ –ø–∞—Ç–µ–Ω—Ç–µ?", reply_markup=ip_kb)
        state['step'] = 9
    elif step == 9:
        state['ip_patent'] = message.text
        await message.answer("–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?", reply_markup=limitations_kb)
        state['step'] = 10
    elif step == 10:
        state['limitations'] = message.text
        if message.text != "–ù–µ—Ç":
            await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=types.ReplyKeyboardRemove())
            state['step'] = 11
        else:
            state['limitations_details'] = ""
            await message.answer("–ï—Å—Ç—å –ª–∏ —Å—É–¥–∏–º–æ—Å—Ç–∏?", reply_markup=yesno_kb)
            state['step'] = 12
    elif step == 11:
        state['limitations_details'] = message.text
        await message.answer("–ï—Å—Ç—å –ª–∏ —Å—É–¥–∏–º–æ—Å—Ç–∏?", reply_markup=yesno_kb)
        state['step'] = 12
    elif step == 12:
        state['conviction'] = message.text
        if message.text == "–î–∞":
            await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=types.ReplyKeyboardRemove())
            state['step'] = 13
        else:
            state['conviction_details'] = ""
            await message.answer("–ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å 10 —á/6 –¥–Ω. –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=work_mode_kb)
            state['step'] = 14
    elif step == 13:
        state['conviction_details'] = message.text
        await message.answer("–ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å 10 —á/6 –¥–Ω. –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=work_mode_kb)
        state['step'] = 14
    elif step == 14:
        state['work_10_6'] = message.text
        await message.answer("–í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å 10 —á/7 –¥–Ω. –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=work_mode_kb)
        state['step'] = 15
    elif step == 15:
        state['work_10_7'] = message.text
        await message.answer("–û–±—ä–µ–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–ª–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ, –æ–±—ä–µ–º—ã, –≤–∏–¥—ã —Ä–∞–±–æ—Ç):")
        state['step'] = 16
    elif step == 16:
        state['objects'] = message.text
        await message.answer("–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        state['step'] = 17
    elif step == 17:
        state['phone'] = message.text

        try:
            cur.execute("""
                INSERT INTO lone_workers (
                    telegram_id, fio, citizenship, work_permit, permit_validity, permit_regions,
                    home_region, work_regions, pvc_exp, pvc_systems, al_exp, al_systems, ip_patent,
                    limitations, limitations_details, conviction, conviction_details, work_10_6, work_10_7,
                    objects, phone
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    message.from_user.id, state.get('fio', ""), state.get('citizenship', ""), state.get('work_permit', ""),
                    state.get('permit_validity', ""), state.get('permit_regions', ""), state.get('home_region', ""),
                    state.get('work_regions', ""), state.get('pvc_exp', ""), state.get('pvc_systems', ""), state.get('al_exp', ""),
                    state.get('al_systems', ""), state.get('ip_patent', ""), state.get('limitations', ""), state.get('limitations_details', ""),
                    state.get('conviction', ""), state.get('conviction_details', ""), state.get('work_10_6', ""),
                    state.get('work_10_7', ""), state.get('objects', ""), state.get('phone', "")
                )
            )
            conn.commit()

            hr_text = (
                f"üìù [–ê–ù–ö–ï–¢–ê –ú–û–ù–¢–ê–ñ–ù–ò–ö]\n"
                f"–§–ò–û: {state.get('fio','')}\n"
                f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {state.get('citizenship','')}\n"
                f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É: {state.get('work_permit','')}\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {state.get('permit_validity','')}\n"
                f"–†–µ–≥–∏–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {state.get('permit_regions','')}\n"
                f"–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {state.get('home_region','')}\n"
                f"–ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö: {state.get('work_regions','')}\n"
                f"–û–ø—ã—Ç –≤ –ü–í–•: {state.get('pvc_exp','')}\n"
                f"–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ü–í–•: {state.get('pvc_systems','')}\n"
                f"–û–ø—ã—Ç –≤ –∞–ª—é–º–∏–Ω–∏–∏: {state.get('al_exp','')}\n"
                f"–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª—é–º–∏–Ω–∏—è: {state.get('al_systems','')}\n"
                f"–ò–ü –Ω–∞ –ø–∞—Ç–µ–Ω—Ç–µ: {state.get('ip_patent','')}\n"
                f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {state.get('limitations','')}\n"
                f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏: {state.get('limitations_details','')}\n"
                f"–°—É–¥–∏–º–æ—Å—Ç–∏: {state.get('conviction','')}\n"
                f"–°—É–¥–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–∏: {state.get('conviction_details','')}\n"
                f"–ì—Ä–∞—Ñ–∏–∫ 10/6: {state.get('work_10_6','')}\n"
                f"–ì—Ä–∞—Ñ–∏–∫ 10/7: {state.get('work_10_7','')}\n"
                f"–û–±—ä–µ–∫—Ç—ã: {state.get('objects','')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.get('phone','')}\n"
                f"Telegram: @{message.from_user.username if message.from_user.username else '-'}"
            )
            await bot.send_message(HR_CHAT_ID, hr_text, reply_markup=None)
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.", reply_markup=main_kb)
            user_state[message.from_user.id] = None
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã:", e)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –±—Ä–∏–≥–∞–¥ ‚Äî –¢–û–õ–¨–ö–û –¥–ª—è –ª–∏—á–∫–∏:
@dp.message(lambda m: m.chat.type == "private" and user_state.get(m.from_user.id, {}).get('role') == 'team')
async def team_form(message: types.Message):
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –±—Ä–∏–≥–∞–¥—ã ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ lone_worker_form

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
